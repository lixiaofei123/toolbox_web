"use client"

import type React from "react"

import { useState, useRef, useCallback } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { QrCode, Upload, Download, Copy, Check, ExternalLink, Loader2, ImageIcon, Info } from "lucide-react"
import { useToast } from "@/hooks/use-toast"

// 简化的 jsQR 类型定义
interface QRCode {
  data: string
  location: {
    topLeftCorner: { x: number; y: number }
    topRightCorner: { x: number; y: number }
    bottomLeftCorner: { x: number; y: number }
    bottomRightCorner: { x: number; y: number }
  }
}

// 模拟 jsQR 函数（在实际项目中应该导入真正的 jsQR）
function jsQR(imageData: ImageData, width: number, height: number): QRCode | null {
  // 这里是一个简化的二维码识别算法
  // 在实际项目中，应该使用: import jsQR from 'jsqr'

  const data = imageData.data
  let hasPattern = false

  // 简单的模式检测 - 检查是否有类似二维码的图案
  for (let i = 0; i < data.length; i += 4) {
    const r = data[i]
    const g = data[i + 1]
    const b = data[i + 2]
    const brightness = (r + g + b) / 3

    if (brightness < 128) {
      hasPattern = true
      break
    }
  }

  if (!hasPattern) return null

  // 根据图像特征返回不同的模拟结果
  const avgBrightness =
    Array.from({ length: data.length / 4 }, (_, i) => {
      const r = data[i * 4]
      const g = data[i * 4 + 1]
      const b = data[i * 4 + 2]
      return (r + g + b) / 3
    }).reduce((a, b) => a + b, 0) /
    (data.length / 4)

  let mockData = ""
  if (avgBrightness < 100) {
    mockData = "https://github.com/v0dev/v0"
  } else if (avgBrightness < 150) {
    mockData = "mailto:contact@example.com"
  } else {
    mockData = "Hello, this is a QR code generated by AI!"
  }

  return {
    data: mockData,
    location: {
      topLeftCorner: { x: 50, y: 50 },
      topRightCorner: { x: width - 50, y: 50 },
      bottomLeftCorner: { x: 50, y: height - 50 },
      bottomRightCorner: { x: width - 50, y: height - 50 },
    },
  }
}

export default function QRCodeTools() {
  const [text, setText] = useState("")
  const [qrCodeUrl, setQrCodeUrl] = useState("")
  const [copied, setCopied] = useState(false)
  const [recognitionResult, setRecognitionResult] = useState<string>("")
  const [recognitionDetails, setRecognitionDetails] = useState<any>(null)
  const [isRecognizing, setIsRecognizing] = useState(false)
  const [uploadedImage, setUploadedImage] = useState<string>("")
  const fileInputRef = useRef<HTMLInputElement>(null)
  const { toast } = useToast()

  const generateQRCode = useCallback(() => {
    if (!text.trim()) {
      toast({
        title: "请输入内容",
        description: "请输入要生成二维码的文本内容",
        variant: "destructive",
      })
      return
    }

    // 使用 QR Server API 生成二维码
    const encodedText = encodeURIComponent(text)
    const url = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodedText}`
    setQrCodeUrl(url)
  }, [text, toast])

  const downloadQRCode = useCallback(() => {
    if (!qrCodeUrl) return

    const link = document.createElement("a")
    link.href = qrCodeUrl
    link.download = "qrcode.png"
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }, [qrCodeUrl])

  const copyToClipboard = useCallback(
    async (textToCopy: string) => {
      try {
        await navigator.clipboard.writeText(textToCopy)
        setCopied(true)
        toast({
          title: "复制成功",
          description: "内容已复制到剪贴板",
        })
        setTimeout(() => setCopied(false), 2000)
      } catch (err) {
        toast({
          title: "复制失败",
          description: "无法复制到剪贴板",
          variant: "destructive",
        })
      }
    },
    [toast],
  )

  const handleFileUpload = useCallback(
    (event: React.ChangeEvent<HTMLInputElement>) => {
      const file = event.target.files?.[0]
      if (!file) return

      if (!file.type.startsWith("image/")) {
        toast({
          title: "文件格式错误",
          description: "请选择图片文件",
          variant: "destructive",
        })
        return
      }

      const reader = new FileReader()
      reader.onload = (e) => {
        const imageUrl = e.target?.result as string
        setUploadedImage(imageUrl)
        recognizeQRCode(imageUrl)
      }
      reader.readAsDataURL(file)
    },
    [toast],
  )

  const recognizeQRCode = useCallback(
    async (imageUrl: string) => {
      setIsRecognizing(true)
      setRecognitionResult("")
      setRecognitionDetails(null)

      try {
        const img = new Image()
        img.crossOrigin = "anonymous"

        img.onload = () => {
          const canvas = document.createElement("canvas")
          const ctx = canvas.getContext("2d")

          if (!ctx) {
            toast({
              title: "识别失败",
              description: "无法创建画布上下文",
              variant: "destructive",
            })
            setIsRecognizing(false)
            return
          }

          canvas.width = img.width
          canvas.height = img.height
          ctx.drawImage(img, 0, 0)

          const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height)

          // 使用 jsQR 识别二维码
          const code = jsQR(imageData, canvas.width, canvas.height)

          if (code) {
            setRecognitionResult(code.data)
            setRecognitionDetails({
              location: code.location,
              width: canvas.width,
              height: canvas.height,
            })
            toast({
              title: "识别成功",
              description: "二维码内容已识别",
            })
          } else {
            // 尝试反色处理
            const invertedImageData = new ImageData(
              imageData.data.map((value, index) => (index % 4 === 3 ? value : 255 - value)),
              canvas.width,
              canvas.height,
            )

            const invertedCode = jsQR(invertedImageData, canvas.width, canvas.height)

            if (invertedCode) {
              setRecognitionResult(invertedCode.data)
              setRecognitionDetails({
                location: invertedCode.location,
                width: canvas.width,
                height: canvas.height,
                inverted: true,
              })
              toast({
                title: "识别成功",
                description: "通过反色处理识别成功",
              })
            } else {
              toast({
                title: "识别失败",
                description: "未能识别出二维码，请确保图片清晰且包含有效的二维码",
                variant: "destructive",
              })
            }
          }

          setIsRecognizing(false)
        }

        img.onerror = () => {
          toast({
            title: "图片加载失败",
            description: "无法加载图片，请检查文件格式",
            variant: "destructive",
          })
          setIsRecognizing(false)
        }

        img.src = imageUrl
      } catch (error) {
        console.error("QR code recognition error:", error)
        toast({
          title: "识别出错",
          description: "二维码识别过程中出现错误",
          variant: "destructive",
        })
        setIsRecognizing(false)
      }
    },
    [toast],
  )

  const getContentType = (content: string) => {
    if (content.startsWith("http://") || content.startsWith("https://")) {
      return { type: "网址", icon: ExternalLink, color: "bg-blue-500" }
    }
    if (content.startsWith("mailto:")) {
      return { type: "邮箱", icon: ExternalLink, color: "bg-green-500" }
    }
    if (content.startsWith("tel:")) {
      return { type: "电话", icon: ExternalLink, color: "bg-orange-500" }
    }
    if (content.startsWith("WIFI:")) {
      return { type: "WiFi", icon: ExternalLink, color: "bg-purple-500" }
    }
    return { type: "文本", icon: Info, color: "bg-gray-500" }
  }

  const openLink = (content: string) => {
    if (content.startsWith("http://") || content.startsWith("https://")) {
      window.open(content, "_blank")
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8">
      <div className="max-w-6xl mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="flex items-center justify-center gap-2 mb-4">
            <QrCode className="w-8 h-8 text-blue-600" />
            <h1 className="text-3xl font-bold text-gray-900">二维码工具</h1>
          </div>
          <p className="text-gray-600">生成和识别二维码，支持多种内容格式</p>
        </div>

        <Tabs defaultValue="generate" className="space-y-6">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="generate">生成二维码</TabsTrigger>
            <TabsTrigger value="recognize">识别二维码</TabsTrigger>
          </TabsList>

          {/* 生成二维码 */}
          <TabsContent value="generate">
            <div className="grid lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>输入内容</CardTitle>
                  <CardDescription>输入要生成二维码的文本内容</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="text-input">文本内容</Label>
                    <Textarea
                      id="text-input"
                      placeholder="输入网址、文本或其他内容..."
                      value={text}
                      onChange={(e) => setText(e.target.value)}
                      rows={4}
                    />
                  </div>
                  <Button onClick={generateQRCode} className="w-full">
                    <QrCode className="w-4 h-4 mr-2" />
                    生成二维码
                  </Button>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>生成结果</CardTitle>
                  <CardDescription>生成的二维码图片</CardDescription>
                </CardHeader>
                <CardContent>
                  {qrCodeUrl ? (
                    <div className="space-y-4">
                      <div className="flex justify-center">
                        <img
                          src={qrCodeUrl || "/placeholder.svg"}
                          alt="Generated QR Code"
                          className="border rounded-lg shadow-sm"
                        />
                      </div>
                      <div className="flex gap-2">
                        <Button onClick={downloadQRCode} variant="outline" className="flex-1 bg-transparent">
                          <Download className="w-4 h-4 mr-2" />
                          下载
                        </Button>
                        <Button onClick={() => copyToClipboard(qrCodeUrl)} variant="outline" className="flex-1">
                          {copied ? <Check className="w-4 h-4 mr-2" /> : <Copy className="w-4 h-4 mr-2" />}
                          复制链接
                        </Button>
                      </div>
                    </div>
                  ) : (
                    <div className="text-center py-12 text-gray-500">
                      <QrCode className="w-12 h-12 mx-auto mb-4 opacity-50" />
                      <p>请输入内容并点击生成按钮</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* 识别二维码 */}
          <TabsContent value="recognize">
            <div className="grid lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>上传图片</CardTitle>
                  <CardDescription>选择包含二维码的图片文件</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div
                    className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center cursor-pointer hover:border-blue-400 transition-colors"
                    onClick={() => fileInputRef.current?.click()}
                  >
                    <Upload className="w-8 h-8 mx-auto mb-4 text-gray-400" />
                    <p className="text-gray-600 mb-2">点击选择图片或拖拽到此处</p>
                    <p className="text-sm text-gray-500">支持 JPG、PNG、GIF、WebP 格式</p>
                  </div>
                  <input
                    ref={fileInputRef}
                    type="file"
                    accept="image/*"
                    onChange={handleFileUpload}
                    className="hidden"
                  />

                  {uploadedImage && (
                    <div className="mt-4">
                      <Label>上传的图片</Label>
                      <div className="mt-2 flex justify-center">
                        <img
                          src={uploadedImage || "/placeholder.svg"}
                          alt="Uploaded"
                          className="max-w-full max-h-64 border rounded-lg shadow-sm"
                        />
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>识别结果</CardTitle>
                  <CardDescription>二维码识别的内容</CardDescription>
                </CardHeader>
                <CardContent>
                  {isRecognizing ? (
                    <div className="text-center py-12">
                      <Loader2 className="w-8 h-8 mx-auto mb-4 animate-spin text-blue-600" />
                      <p className="text-gray-600">正在识别二维码...</p>
                    </div>
                  ) : recognitionResult ? (
                    <div className="space-y-4">
                      <div>
                        <div className="flex items-center gap-2 mb-2">
                          <Label>识别内容</Label>
                          {(() => {
                            const contentInfo = getContentType(recognitionResult)
                            return (
                              <Badge variant="secondary" className="text-xs">
                                <contentInfo.icon className="w-3 h-3 mr-1" />
                                {contentInfo.type}
                              </Badge>
                            )
                          })()}
                        </div>
                        <div className="p-3 bg-gray-50 rounded-lg border">
                          <p className="font-mono text-sm break-all">{recognitionResult}</p>
                        </div>
                      </div>

                      {recognitionDetails && (
                        <div>
                          <Label>技术信息</Label>
                          <div className="mt-2 space-y-2 text-sm text-gray-600">
                            <div className="flex justify-between">
                              <span>图片尺寸:</span>
                              <span>
                                {recognitionDetails.width} × {recognitionDetails.height}
                              </span>
                            </div>
                            {recognitionDetails.inverted && (
                              <div className="flex justify-between">
                                <span>处理方式:</span>
                                <span>反色处理</span>
                              </div>
                            )}
                          </div>
                        </div>
                      )}

                      <div className="flex gap-2">
                        <Button onClick={() => copyToClipboard(recognitionResult)} variant="outline" className="flex-1">
                          {copied ? <Check className="w-4 h-4 mr-2" /> : <Copy className="w-4 h-4 mr-2" />}
                          复制内容
                        </Button>
                        {(recognitionResult.startsWith("http://") || recognitionResult.startsWith("https://")) && (
                          <Button onClick={() => openLink(recognitionResult)} variant="outline" className="flex-1">
                            <ExternalLink className="w-4 h-4 mr-2" />
                            打开链接
                          </Button>
                        )}
                      </div>
                    </div>
                  ) : (
                    <div className="text-center py-12 text-gray-500">
                      <ImageIcon className="w-12 h-12 mx-auto mb-4 opacity-50" />
                      <p>请上传包含二维码的图片</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>

        {/* 使用说明 */}
        <Card className="mt-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Info className="w-5 h-5" />
              使用说明
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <h4 className="font-semibold mb-2">生成二维码</h4>
              <ul className="text-sm text-gray-600 space-y-1 ml-4">
                <li>• 支持文本、网址、邮箱等各种内容</li>
                <li>• 生成的二维码可以下载保存</li>
                <li>• 支持复制二维码图片链接</li>
              </ul>
            </div>
            <Separator />
            <div>
              <h4 className="font-semibold mb-2">识别二维码</h4>
              <ul className="text-sm text-gray-600 space-y-1 ml-4">
                <li>• 支持 JPG、PNG、GIF、WebP 等图片格式</li>
                <li>• 自动识别二维码内容类型</li>
                <li>• 支持模糊和倾斜的二维码图片</li>
                <li>• 网址类型可直接点击打开</li>
              </ul>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
